" Header: Vim config

let b:curr_dir=expand("%:p:h")

let mapleader = " "

" Section: General

set nocompatible
set lazyredraw

set timeoutlen=1200
set ttimeoutlen=50

filetype plugin indent on

" Section: Settings

let b:opts_vim=b:curr_dir."/options.vim"
if (filereadable(b:opts_vim))
  execute "source ".b:opts_vim
endif

" Section: Autocommands

let b:auto_vim=b:curr_dir."/autocmds.vim"
if (filereadable(b:auto_vim))
  execute "source ".b:auto_vim
endif

" Section: Plugins

call plug#begin('~/.vim/plugged')

" Sensible defaults
Plug 'tpope/vim-sensible'

" Automatically end certain structures
Plug 'tpope/vim-endwise'

" Delete/change/add surrounding chars
Plug 'tpope/vim-surround'

" Comment stuff out
Plug 'tpope/vim-commentary'

" Intellisense and completion menu
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Editorconfig support
Plug 'editorconfig/editorconfig-vim'

" NERDTree; file browser
" Plug 'preservim/nerdtree'

" FZF for searching and navigating
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" Add Nerd Font icons to i.e NERDTree
Plug 'ryanoasis/vim-devicons'

" Show import sizes for JavaScript packages
"Plug 'yardnsm/vim-import-cost'

" Snippets
Plug 'SirVer/ultisnips'

" Statusline (bottom)
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Colorscheme
Plug 'cocopon/iceberg.vim'

" A good Solarized/Gruvbox clone
Plug 'ajmwagar/vim-deus'

" A soothing colorscheme
Plug 'drewtempelmeyer/palenight.vim'

call plug#end()

" Set colorscheme
set background=dark
silent! colorscheme palenight

" Trigger configuration. You need to change this to something other than <tab> if you use one of the following:
" - https://github.com/Valloric/YouCompleteMe
" - https://github.com/nvim-lua/completion-nvim
let g:UltiSnipsExpandTrigger="<cr>"
" let g:UltiSnipsJumpForwardTrigger="<c-->"
" let g:UltiSnipsJumpBackwardTrigger="<c-p>"

" Sub Section: CoC - LSP, linter and formatters

" CoC extensions
let g:coc_global_extensions = [
  \ 'coc-css',
  \ 'coc-diagnostic',
  \ 'coc-go',
  \ 'coc-golines',
  \ 'coc-html',
  \ 'coc-html-css-support',
  \ 'coc-highlight',
  \ 'coc-json',
  \ 'coc-ltex',
  \ 'coc-lua',
  \ 'coc-markdownlint',
  \ 'coc-prettier',
  \ 'coc-pyright',
  \ '@yaegassy/coc-ruff',
  \ 'coc-rust-analyzer',
  \ 'coc-sh',
  \ 'coc-snippets',
  \ 'coc-sqlfluff',
  \ 'coc-stylua',
  \ 'coc-svelte',
  \ 'coc-svg',
  \ 'coc-tailwindcss',
  \ 'coc-texlab',
  \ 'coc-toml',
  \ 'coc-tsserver',
  \ 'coc-vimlsp',
  \ 'coc-xml',
  \ 'coc-yaml'
  \]

" TODO: Setup and fix Ultisnips, coc.nvim and snippets altogether.
" TODO: Check if possible to 'on buffer enter, move cursor to where it last was'.

inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ CheckBackspace() ? "\<TAB>" :
      \ coc#refresh()

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

let g:coc_snippet_next = '<tab>'
let g:coc_snippet_prev = '<s-tab>'

" Use <C-l> for trigger snippet expand.
imap <C-l> <Plug>(coc-snippets-expand)

" Use <C-j> for select text for visual placeholder of snippet.
vmap <C-j> <Plug>(coc-snippets-select)

" Use <C-j> for both expand and jump (make expand higher priority.)
imap <C-j> <Plug>(coc-snippets-expand-jump)

" inoremap <silent><expr> <TAB>
"       \ coc#pum#visible() ? coc#pum#next(1) :
"       \ CheckBackspace() ? "\<Tab>" :
"       \ coc#refresh()
" inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" " Make <CR> to accept selected completion item or notify coc.nvim to format
" " <C-g>u breaks current undo, please make your own choice
" inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
"                               \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming
nmap <leader>cr <Plug>(coc-rename)

" Formatting selected code
xmap <leader>cf  <Plug>(coc-format-selected)
nmap <leader>cf  <Plug>(coc-format-selected)

augroup CocGroup
  autocmd!
  " Setup formatexpr specified filetype(s)
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying code actions to the selected code block
" Example: `<leader>aap` for current paragraph
xmap <leader>cA  <Plug>(coc-codeaction-selected)
nmap <leader>cA <Plug>(coc-codeaction-selected)

" Remap keys for applying code actions at the cursor position
nmap <leader>ca  <Plug>(coc-codeaction-cursor)
" Remap keys for apply code actions affect whole buffer
" nmap <leader>cB  <Plug>(coc-codeaction-source)
" Apply the most preferred quickfix action to fix diagnostic on the current line
nmap <leader>cF  <Plug>(coc-fix-current)

" Remap keys for applying refactor code actions
nmap <silent> <leader>cRe <Plug>(coc-codeaction-refactor)
xmap <silent> <leader>cRs <Plug>(coc-codeaction-refactor-selected)
nmap <silent> <leader>cRs <Plug>(coc-codeaction-refactor-selected)

" Run the Code Lens action on the current line
nmap <leader>cl  <Plug>(coc-codelens-action)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> to scroll float windows/popups
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges
" Requires 'textDocument/selectionRange' support of language server
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer
command! -nargs=0 Format :call CocActionAsync('format')

" Add `:Fold` command to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics
nnoremap <silent><nowait> <leader>Ca  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent><nowait> <leader>Ce  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent><nowait> <leader>Cc  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent><nowait> <leader>Co  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent><nowait> <leader>Cs  :<C-u>CocList -I symbols<cr>
" Do default action for next item
nnoremap <silent><nowait> <leader>Cj  :<C-u>CocNext<CR>
" Do default action for previous item
nnoremap <silent><nowait> <leader>Ck  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent><nowait> <leader>Cp  :<C-u>CocListResume<CR>

" Section: Keymaps

" Sub Section: Quality of life

" Exit
nnoremap <silent> <leader>q :q<CR>

" Easily exit insert mode
inoremap jj <Esc>

" Redo
nnoremap <silent> U :redo<CR>

" Remove highlights
nnoremap <silent> H :nohl<CR>

" Sub Section: Files

" Browse files
nnoremap <silent> <leader><leader> :Files<CR>
nnoremap <silent> <leader>ff :Files<CR>

" Browse Git files
nnoremap <silent> <leader>fg :GFiles<CR>

" Browse buffers
nnoremap <silent> <leader>, :Buffers<CR>
nnoremap <silent> <leader>fb :Buffers<CR>

" Grep
nnoremap <silent> <leader>/ :RG<CR>
nnoremap <silent> <leader>fw :RG<CR>

" Browse command history
nnoremap <silent> <leader>fhc :History:<CR>

" Browse search history
nnoremap <silent> <leader>fhs :History/<CR>

" Browse snippets
nnoremap <silent> <leader>fu :Snippets<CR>

" Save file
nnoremap <silent> <leader>fs :w<CR>

" Open Netrw (file browser)
" nnoremap <silent> <leader>fe :Explore<CR>

" Sub Section: Windows

" Split window horizontal and vertical
nnoremap <silent> <leader>wh :split<CR>
nnoremap <silent> <leader>wv :vsplit<CR>

" You can split the window in Vim by typing :split or :vsplit.
" Navigate the split view easier by pressing CTRL+j, CTRL+k, CTRL+h, or CTRL+l.
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" Resize split windows using arrow keys by pressing:
" CTRL+UP, CTRL+DOWN, CTRL+LEFT, or CTRL+RIGHT.
noremap <c-up> <c-w>+
noremap <c-down> <c-w>-
noremap <c-left> <c-w>>
noremap <c-right> <c-w><

" vim: ft=vim
